{"id": "2507.08759", "categories": ["cs.PL", "cs.LO"], "pdf": "https://arxiv.org/pdf/2507.08759", "abs": "https://arxiv.org/abs/2507.08759", "authors": ["Maximilian Doré"], "title": "Dependent Multiplicities in Dependent Linear Type Theory", "comment": null, "summary": "We present a novel dependent linear type theory in which the multiplicity of\nsome variable - i.e., the number of times the variable can be used in a program\n- can depend on other variables. This allows us to give precise resource\nannotations to many higher-order functions that cannot be adequately typed in\nany other system. Inspired by the Dialectica translation, our typing discipline\nis obtained by embedding linear logic into dependent type theory and specifying\nhow the embedded logic interacts with the host theory. We can then use a\nstandard natural numbers type to obtain a quantitative typing system with\ndependent multiplicities. We characterise the semantics for our theory as a\ncombination of standard models of dependent type theory and linear logic. Our\nsystem can be added to any dependently typed language, which we demonstrate\nwith an implementation in Agda."}
{"id": "2507.08796", "categories": ["cs.PL", "cs.LG"], "pdf": "https://arxiv.org/pdf/2507.08796", "abs": "https://arxiv.org/abs/2507.08796", "authors": ["Owen Lewis", "Neil Ghani", "Andrew Dudzik", "Christos Perivolaropoulos", "Razvan Pascanu", "Petar Veličković"], "title": "Filter Equivariant Functions: A symmetric account of length-general extrapolation on lists", "comment": "18 pages, 2 figures", "summary": "What should a function that extrapolates beyond known input/output examples\nlook like? This is a tricky question to answer in general, as any function\nmatching the outputs on those examples can in principle be a correct\nextrapolant. We argue that a \"good\" extrapolant should follow certain kinds of\nrules, and here we study a particularly appealing criterion for rule-following\nin list functions: that the function should behave predictably even when\ncertain elements are removed. In functional programming, a standard way to\nexpress such removal operations is by using a filter function. Accordingly, our\npaper introduces a new semantic class of functions -- the filter equivariant\nfunctions. We show that this class contains interesting examples, prove some\nbasic theorems about it, and relate it to the well-known class of map\nequivariant functions. We also present a geometric account of filter\nequivariants, showing how they correspond naturally to certain simplicial\nstructures. Our highlight result is the amalgamation algorithm, which\nconstructs any filter-equivariant function's output by first studying how it\nbehaves on sublists of the input, in a way that extrapolates perfectly."}
{"id": "2507.08285", "categories": ["cs.GR", "cs.CV"], "pdf": "https://arxiv.org/pdf/2507.08285", "abs": "https://arxiv.org/abs/2507.08285", "authors": ["Gwanhyeong Koo", "Sunjae Yoon", "Younghwan Lee", "Ji Woo Hong", "Chang D. Yoo"], "title": "FlowDrag: 3D-aware Drag-based Image Editing with Mesh-guided Deformation Vector Flow Fields", "comment": "ICML 2025 Spotlight", "summary": "Drag-based editing allows precise object manipulation through point-based\ncontrol, offering user convenience. However, current methods often suffer from\na geometric inconsistency problem by focusing exclusively on matching\nuser-defined points, neglecting the broader geometry and leading to artifacts\nor unstable edits. We propose FlowDrag, which leverages geometric information\nfor more accurate and coherent transformations. Our approach constructs a 3D\nmesh from the image, using an energy function to guide mesh deformation based\non user-defined drag points. The resulting mesh displacements are projected\ninto 2D and incorporated into a UNet denoising process, enabling precise\nhandle-to-target point alignment while preserving structural integrity.\nAdditionally, existing drag-editing benchmarks provide no ground truth, making\nit difficult to assess how accurately the edits match the intended\ntransformations. To address this, we present VFD (VidFrameDrag) benchmark\ndataset, which provides ground-truth frames using consecutive shots in a video\ndataset. FlowDrag outperforms existing drag-based editing methods on both VFD\nBench and DragBench."}
{"id": "2507.08513", "categories": ["cs.GR", "cs.CV"], "pdf": "https://arxiv.org/pdf/2507.08513", "abs": "https://arxiv.org/abs/2507.08513", "authors": ["Liu He", "Xiao Zeng", "Yizhi Song", "Albert Y. C. Chen", "Lu Xia", "Shashwat Verma", "Sankalp Dayal", "Min Sun", "Cheng-Hao Kuo", "Daniel Aliaga"], "title": "Advancing Multimodal LLMs by Large-Scale 3D Visual Instruction Dataset Generation", "comment": null, "summary": "Multimodal Large Language Models (MLLMs) struggle with accurately capturing\ncamera-object relations, especially for object orientation, camera viewpoint,\nand camera shots. This stems from the fact that existing MLLMs are trained on\nimages with limited diverse camera-object relations and corresponding textual\ndescriptions. To address this, we propose a synthetic generation pipeline to\ncreate large-scale 3D visual instruction datasets. Our framework takes 3D\nassets as input and uses rendering and diffusion-based image generation models\nto create photorealistic images preserving precise camera-object relations.\nAdditionally, large language models (LLMs) are used to generate text prompts\nfor guiding visual instruction tuning and controlling image generation. We\ncreate Ultimate3D, a dataset of 240K VQAs with precise camera-object\nannotations, and corresponding benchmark. MLLMs fine-tuned on our proposed\ndataset outperform commercial models by a large margin, achieving an average\naccuracy improvement of 33.4% on camera-object relation recognition tasks. Our\ncode, dataset, and benchmark will contribute to broad MLLM applications."}
