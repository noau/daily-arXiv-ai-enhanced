{"id": "2510.26033", "categories": ["cs.GT"], "pdf": "https://arxiv.org/pdf/2510.26033", "abs": "https://arxiv.org/abs/2510.26033", "authors": ["David Smith", "Jie Dong", "Yizhou Yang"], "title": "Engineering Social Optimality via Utility Shaping in Non-Cooperative Games under Incomplete Information and Imperfect Monitoring", "comment": null, "summary": "In this paper, we study decentralized decision-making where agents optimize\nprivate objectives under incomplete information and imperfect public\nmonitoring, in a non-cooperative setting. By shaping utilities-embedding shadow\nprices or Karush-Kuhn-Tucker(KKT)-aligned penalties-we make the stage game an\nexact-potential game whose unique equilibrium equals the (possibly constrained)\nsocial optimum. We characterize the Bayesian equilibrium as a stochastic\nvariational inequality; strong monotonicity follows from a single-inflection\ncompressed/stretched-exponential response combined with convex pricing. We give\ntracking bounds for damped-gradient and best-response-with-hysteresis updates\nunder a noisy public index, and corresponding steady-state error. The framework\naccommodates discrete and continuous action sets and composes with slower\ndiscrete assignment. Deployable rules include: embed prices/penalties; publish\na single public index; tune steps, damping, and dual rates for contraction.\nComputational experiments cover (i) a multi-tier supply chain and (ii) a\nnon-cooperative agentic-AI compute market of bidding bots. Relative to\nprice-only baselines, utility shaping attains near-centralized welfare,\neliminates steady-state constraint/capacity violations when feasible, and\naccelerates convergence; with quantization, discrete equilibria track\ncontinuous ones within the mesh. The blueprint is portable to demand response,\ncloud/edge scheduling, and transportation pricing and biosecurity/agriculture.\nOverall, utility shaping plus a public index implements the constrained social\noptimum with stable equilibria under noise and drift-an\noperations-research-friendly alternative to heavy messaging or full mechanism\ndesign."}
{"id": "2510.26055", "categories": ["cs.GT"], "pdf": "https://arxiv.org/pdf/2510.26055", "abs": "https://arxiv.org/abs/2510.26055", "authors": ["Alon Bebchuk"], "title": "NP-Hardness of Approximating Nash Social Welfare with Supermodular Valuations", "comment": null, "summary": "We study the problem of allocating a set of indivisible items to agents with\nsupermodular utilities to maximize the Nash social welfare. We show that the\nproblem is NP-hard for any approximation factor."}
{"id": "2510.26016", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2510.26016", "abs": "https://arxiv.org/abs/2510.26016", "authors": ["Michael Arntzenius"], "title": "Fair intersection of seekable iterators", "comment": "8 pages, 2 figures, published in miniKanren 2025", "summary": "miniKanren's key semantic advance over Prolog is to implement a complete yet\nefficient search strategy, fairly interleaving execution between disjuncts.\nThis fairness is accomplished by bounding how much work is done exploring one\ndisjunct before switching to the next. We show that the same idea -- fairness\nvia bounded work -- underlies an elegant compositional approach to implementing\nworst-case optimal joins using a seekable iterator interface, suitable for\nshallow embedding in functional languages."}
{"id": "2510.26141", "categories": ["cs.GR", "cs.CV"], "pdf": "https://arxiv.org/pdf/2510.26141", "abs": "https://arxiv.org/abs/2510.26141", "authors": ["Xin Hu", "Pengfei Xu", "Jin Zhou", "Hongbo Fu", "Hui Huang"], "title": "StructLayoutFormer:Conditional Structured Layout Generation via Structure Serialization and Disentanglement", "comment": null, "summary": "Structured layouts are preferable in many 2D visual contents (\\eg, GUIs,\nwebpages) since the structural information allows convenient layout editing.\nComputational frameworks can help create structured layouts but require heavy\nlabor input. Existing data-driven approaches are effective in automatically\ngenerating fixed layouts but fail to produce layout structures. We present\nStructLayoutFormer, a novel Transformer-based approach for conditional\nstructured layout generation. We use a structure serialization scheme to\nrepresent structured layouts as sequences. To better control the structures of\ngenerated layouts, we disentangle the structural information from the element\nplacements. Our approach is the first data-driven approach that achieves\nconditional structured layout generation and produces realistic layout\nstructures explicitly. We compare our approach with existing data-driven layout\ngeneration approaches by including post-processing for structure extraction.\nExtensive experiments have shown that our approach exceeds these baselines in\nconditional structured layout generation. We also demonstrate that our approach\nis effective in extracting and transferring layout structures. The code is\npublicly available at %\\href{https://github.com/Teagrus/StructLayoutFormer}\n{https://github.com/Teagrus/StructLayoutFormer}."}
