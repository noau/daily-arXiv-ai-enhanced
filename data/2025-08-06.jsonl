{"id": "2508.03445", "categories": ["cs.GR"], "pdf": "https://arxiv.org/pdf/2508.03445", "abs": "https://arxiv.org/abs/2508.03445", "authors": ["Patrick Paetzold", "Rebecca Kehlbeck", "Yumeng Xue", "Bin Chen", "Yunhai Wang", "Oliver Deussen"], "title": "Neighborhood-Preserving Voronoi Treemaps", "comment": null, "summary": "Voronoi treemaps are used to depict nodes and their hierarchical\nrelationships simultaneously. However, in addition to the hierarchical\nstructure, data attributes, such as co-occurring features or similarities,\nfrequently exist. Examples include geographical attributes like shared borders\nbetween countries or contextualized semantic information such as embedding\nvectors derived from large language models. In this work, we introduce a\nVoronoi treemap algorithm that leverages data similarity to generate\nneighborhood-preserving treemaps. First, we extend the treemap layout pipeline\nto consider similarity during data preprocessing. We then use a Kuhn-Munkres\nmatching of similarities to centroidal Voronoi tessellation (CVT) cells to\ncreate initial Voronoi diagrams with equal cell sizes for each level. Greedy\nswapping is used to improve the neighborhoods of cells to match the data's\nsimilarity further. During optimization, cell areas are iteratively adjusted to\ntheir respective sizes while preserving the existing neighborhoods. We\ndemonstrate the practicality of our approach through multiple real-world\nexamples drawn from infographics and linguistics. To quantitatively assess the\nresulting treemaps, we employ treemap metrics and measure neighborhood\npreservation."}
{"id": "2508.03253", "categories": ["cs.GT", "cs.AI", "cs.MA"], "pdf": "https://arxiv.org/pdf/2508.03253", "abs": "https://arxiv.org/abs/2508.03253", "authors": ["Davin Choo", "Winston Fu", "Derek Khu", "Tzeh Yuan Neoh", "Tze-Yang Poon", "Nicholas Teh"], "title": "Approximate Proportionality in Online Fair Division", "comment": null, "summary": "We study the online fair division problem, where indivisible goods arrive\nsequentially and must be allocated immediately and irrevocably to agents. Prior\nwork has established strong impossibility results for approximating classic\nfairness notions, such as envy-freeness and maximin share fairness, in this\nsetting. In contrast, we focus on proportionality up to one good (PROP1), a\nnatural relaxation of proportionality whose approximability remains unresolved.\nWe begin by showing that three natural greedy algorithms fail to guarantee any\npositive approximation to PROP1 in general, against an adaptive adversary. This\nis surprising because greedy algorithms are commonly used in fair division and\na natural greedy algorithm is known to be able to achieve PROP1 under\nadditional information assumptions. This hardness result motivates the study of\nnon-adaptive adversaries and the use of side-information, in the spirit of\nlearning-augmented algorithms. For non-adaptive adversaries, we show that the\nsimple uniformly random allocation can achieve a meaningful PROP1 approximation\nwith high probability. Meanwhile, we present an algorithm that obtain robust\napproximation ratios against PROP1 when given predictions of the maximum item\nvalue (MIV). Interestingly, we also show that stronger fairness notions such as\nEF1, MMS, and PROPX remain inapproximable even with perfect MIV predictions."}
{"id": "2508.02857", "categories": ["cs.PL", "quant-ph"], "pdf": "https://arxiv.org/pdf/2508.02857", "abs": "https://arxiv.org/abs/2508.02857", "authors": ["Mikhail Mints", "Finn Voichick", "Leonidas Lampropoulos", "Robert Rand"], "title": "Compositional Quantum Control Flow with Efficient Compilation in Qunity", "comment": "88 pages, 30 figures", "summary": "Most existing quantum programming languages are based on the quantum circuit\nmodel of computation, as higher-level abstractions are particularly challenging\nto implement - especially ones relating to quantum control flow. The Qunity\nlanguage, proposed by Voichick et al., offered such an abstraction in the form\nof a quantum control construct, with great care taken to ensure that the\nresulting language is still realizable. However, Qunity lacked a working\nimplementation, and the originally proposed compilation procedure was very\ninefficient, with even simple quantum algorithms compiling to unreasonably\nlarge circuits.\n  In this work, we focus on the efficient compilation of high-level quantum\ncontrol flow constructs, using Qunity as our starting point. We introduce a\nwider range of abstractions on top of Qunity's core language that offer\ncompelling trade-offs compared to its existing control construct. We create a\ncomplete implementation of a Qunity compiler, which converts high-level Qunity\ncode into the quantum assembly language OpenQASM 3. We develop optimization\ntechniques for multiple stages of the Qunity compilation procedure, including\nboth low-level circuit optimizations as well as methods that consider the\nhigh-level structure of a Qunity program, greatly reducing the number of qubits\nand gates used by the compiler."}
{"id": "2508.03558", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2508.03558", "abs": "https://arxiv.org/abs/2508.03558", "authors": ["M Zafir Sadik Khan", "Nowfel Mashnoor", "Mohammad Akyash", "Kimia Azar", "Hadi Kamali"], "title": "SAGE-HLS: Syntax-Aware AST-Guided LLM for High-Level Synthesis Code Generation", "comment": "Accepted to the IEEE International Conference on Computer Design\n  (ICCD 2025)", "summary": "In today's rapidly evolving field of electronic design automation (EDA), the\ncomplexity of hardware designs is increasing, necessitating more sophisticated\nautomation solutions. High-level synthesis (HLS), as a pivotal solution,\nautomates hardware designs from high-level abstractions (e.g., C/C++). However,\nit faces significant challenges, particularly in design space exploration and\noptimization. While large language models (LLMs) have shown notable\ncapabilities in code generation, their application to HLS has been limited due\nto the scarcity of (publicly) available HLS code datasets. Hence, research in\nthis domain has primarily focused on techniques such as prompt engineering and\nretrieval-augmented generation (RAG). To overcome this limitation, this paper\nintroduces SAGE-HLS, the first-of-its-kind fine-tuned LLM specifically for HLS\ncode generation. Our method includes three key advancements: (i) We implement\nVerilog-to-C/C++ porting, converting verified and synthesizable Verilog codes\ninto corresponding C, creating a dataset of 16.7K HLS codes; (ii) We implement\na fine-tuning strategy, which is based on instruction prompting to code\ngeneration guided by abstract syntax tree (AST); (iii) We develop a\nsemi-automated evaluation framework using VerilogEval to assess the\nfunctionality of the generated HLS code. Our experiments show that SAGE-HLS,\nfined-tuned on the QwenCoder (2.5) 7B model, achieves a near 100% success rate\nin code synthesizability and a 75% success rate in functional correctness."}
{"id": "2508.03640", "categories": ["cs.PL", "D.3.2;D.3.4;K.3.1"], "pdf": "https://arxiv.org/pdf/2508.03640", "abs": "https://arxiv.org/abs/2508.03640", "authors": ["Pedro Vasconcelos"], "title": "Teaching Introductory Functional Programming Using Haskelite", "comment": "In Proceedings TFPiE 2025, arXiv:2508.02305", "summary": "Learning functional programming requires learning a substitution-based\ncomputational model. While substitution should be a familiar concept from\nhigh-school algebra, students often have difficulty applying it to new\nsettings, such as recursive definitions, algebraic data types and higher-order\nfunctions. Step-by-step interpreters have been shown to help beginners by\nclarifying misconceptions and improving understanding.\n  This paper reports on the experience of using a step-by-step tracing\ninterpreter for a subset of Haskell while teaching an introductory functional\nprogramming course at the University of Porto. We describe the use of the\ninterpreter, present some feedback obtained from students, reflect on the\nlessons learned and point directions for further work."}
