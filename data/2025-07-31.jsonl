{"id": "2507.22819", "categories": ["cs.GT", "cs.CC"], "pdf": "https://arxiv.org/pdf/2507.22819", "abs": "https://arxiv.org/abs/2507.22819", "authors": ["Debtoru Chatterjee", "Girish Tiwari", "Niladri Chatterjee"], "title": "Reducing the complexity of computing the values of a Nash equilibrium", "comment": "Presented at 36th Stony Brook International Conference on Game Theory\n  held on July 14 to 17, 2025 in Stony Brook, New York", "summary": "The Colonel Blotto game, formulated by Emile Borel, involves players\nallocating limited resources to multiple battlefields simultaneously, with the\nwinner being the one who allocates more resources to each battlefield.\nComputation of the Nash equilibrium, including of two person, zero sum, mixed\nstrategy Colonel Blotto games have encountered issues of scalability and\ncomplexity owing to their PPAD completeness. This paper proposes an algorithm\nthat computes the same value as the Nash equilibrium but cannot be\ncharacterized by the Fixed point Theorems of Tarski, Kakutani and Brouwer. The\nreduced complexity of the proposed algorithm is based on dispensing with the\nneed for computing both players Nash strategies in Colonel Blotto games. The\nsame algorithm can, therefore, be extended to all two person, zero sum games to\ncompute the value of the Nash equilibrium. The theoretical superiority of the\nproposed algorithm over both LP solvers and another method that computes the\nsame value of the game as its Nash equilibrium by a random assignment of\nprobabilities to the active strategy set of the defending player, is also\nproposed."}
{"id": "2507.22069", "categories": ["cs.PL", "cs.AI"], "pdf": "https://arxiv.org/pdf/2507.22069", "abs": "https://arxiv.org/abs/2507.22069", "authors": ["Tobias Sesterhenn", "Ian Berlot-Attwell", "Janis Zenkner", "Christian Bartelt"], "title": "A Compute-Matched Re-Evaluation of TroVE on MATH", "comment": null, "summary": "Reusing established theorems and formulas is central to mathematical problem\nsolving, serving as essential building blocks for tackling increasingly complex\nchallenges. Recent work, TroVE, argues that code-generating Large Language\nModels (LLMs) can benefit similarly on the MATH benchmark by inducing and\nreusing higher-level toolboxes. By allocating computational budget across an\nensemble of three modes -- directly generating code, creating tools, and\nreusing tools -- TroVE claims to outperform a PRIMITIVE baseline that only\nperforms direct generation. However, recent analysis (Berlot-Attwell et al.,\n2024) casts doubt on these gains, noting that the tools created are often\ntrivial or rarely reused, suggesting that improvements may stem from\nself-consistency or self-correction. In this work, we re-evaluate TroVE on\nMATH, analyze the impact of each of its modes, and show that its benefit does\nnot come from these mechanisms, but simply from a higher computational budget\nspent for TroVE compared to PRIMITIVE. To this end, we also perform a small\ncorrection in the original implementation of TroVE's selection mechanism,\nboosting TroVE's performance on MATH by 3\\% in accuracy. After matching for\ncompute, the benefit of TroVE reduces to a marginal improvement of 1\\%,\nsuggesting that this toolbox approach does not provide a significant benefit on\nMATH."}
