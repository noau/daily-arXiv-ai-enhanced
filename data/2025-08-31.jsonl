{"id": "2508.20213", "categories": ["cs.GT", "cs.AI"], "pdf": "https://arxiv.org/pdf/2508.20213", "abs": "https://arxiv.org/abs/2508.20213", "authors": ["Boaz Taitler", "Omer Ben-Porat"], "title": "Collaborating with GenAI: Incentives and Replacements", "comment": null, "summary": "The rise of Generative AI (GenAI) is reshaping how workers contribute to\nshared projects. While workers can use GenAI to boost productivity or reduce\neffort, managers may use it to replace some workers entirely. We present a\ntheoretical framework to analyze how GenAI affects collaboration in such\nsettings. In our model, the manager selects a team to work on a shared task,\nwith GenAI substituting for unselected workers. Each worker selects how much\neffort to exert, and incurs a cost that increases with the level of effort. We\nshow that GenAI can lead workers to exert no effort, even if GenAI is almost\nineffective. We further show that the manager's optimization problem is\nNP-complete, and provide an efficient algorithm for the special class of\n(almost-) linear instances. Our analysis shows that even workers with low\nindividual value may play a critical role in sustaining overall output, and\nexcluding such workers can trigger a cascade. Finally, we conduct extensive\nsimulations to illustrate our theoretical findings."}
{"id": "2508.20723", "categories": ["cs.GT", "cs.LG", "cs.SY", "eess.SY"], "pdf": "https://arxiv.org/pdf/2508.20723", "abs": "https://arxiv.org/abs/2508.20723", "authors": ["Michal Bujak", "Rafal Kucharski"], "title": "Balancing Profit and Traveller Acceptance in Ride-Pooling Personalised Fares", "comment": null, "summary": "Ride-pooling systems, to succeed, must provide an attractive service, namely\ncompensate perceived costs with an appealing price. However, because of a\nstrong heterogeneity in a value-of-time, each traveller has his own acceptable\nprice, unknown to the operator. Here, we show that individual acceptance levels\ncan be learned by the operator (over $90\\%$ accuracy for pooled travellers in\n$10$ days) to optimise personalised fares. We propose an adaptive pricing\npolicy, where every day the operator constructs an offer that progressively\nmeets travellers' expectations and attracts a growing demand. Our results\nsuggest that operators, by learning behavioural traits of individual\ntravellers, may improve performance not only for travellers (increased utility)\nbut also for themselves (increased profit). Moreover, such knowledge allows the\noperator to remove inefficient pooled rides and focus on attractive and\nprofitable combinations."}
{"id": "2508.20365", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2508.20365", "abs": "https://arxiv.org/abs/2508.20365", "authors": ["Naoki Kobayashi", "Ryosuke Sato", "Ayumi Shinohara", "Ryo Yoshinaka"], "title": "Solvable Tuple Patterns and Their Applications to Program Verification", "comment": null, "summary": "Despite the recent progress of automated program verification techniques,\nfully automated verification of programs manipulating recursive data structures\nremains a challenge. We introduce the notion of solvable tuple patterns (STPs)\nto express invariants between list-like recursive data structures. A\ndistinguishing feature of STPs is that they can be efficiently inferred from\nonly a small number of positive samples; no negative samples are required. An\nSMT solver that supports the sequence theory can be used to check that an\ninferred STP is indeed an inductive invariant. After presenting basic\nproperties of STPs and an STP inference algorithm, we show how to incorporate\nthe STP inference into a CHC (Constrained Horn Clauses) solver supporting\nlist-like data structures, which serves as a uniform backend for automated\nprogram verification tools. A CHC solver incorporating the STP inference has\nwon the ADT-LIN category of CHC-COMP 2025 by a big margin."}
{"id": "2508.21058", "categories": ["cs.GR", "cs.AI", "cs.CV"], "pdf": "https://arxiv.org/pdf/2508.21058", "abs": "https://arxiv.org/abs/2508.21058", "authors": ["Shengqu Cai", "Ceyuan Yang", "Lvmin Zhang", "Yuwei Guo", "Junfei Xiao", "Ziyan Yang", "Yinghao Xu", "Zhenheng Yang", "Alan Yuille", "Leonidas Guibas", "Maneesh Agrawala", "Lu Jiang", "Gordon Wetzstein"], "title": "Mixture of Contexts for Long Video Generation", "comment": "Project page: https://primecai.github.io/moc/", "summary": "Long video generation is fundamentally a long context memory problem: models\nmust retain and retrieve salient events across a long range without collapsing\nor drifting. However, scaling diffusion transformers to generate long-context\nvideos is fundamentally limited by the quadratic cost of self-attention, which\nmakes memory and computation intractable and difficult to optimize for long\nsequences. We recast long-context video generation as an internal information\nretrieval task and propose a simple, learnable sparse attention routing module,\nMixture of Contexts (MoC), as an effective long-term memory retrieval engine.\nIn MoC, each query dynamically selects a few informative chunks plus mandatory\nanchors (caption, local windows) to attend to, with causal routing that\nprevents loop closures. As we scale the data and gradually sparsify the\nrouting, the model allocates compute to salient history, preserving identities,\nactions, and scenes over minutes of content. Efficiency follows as a byproduct\nof retrieval (near-linear scaling), which enables practical training and\nsynthesis, and the emergence of memory and consistency at the scale of minutes."}
{"id": "2508.20922", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2508.20922", "abs": "https://arxiv.org/abs/2508.20922", "authors": ["Markus Böck", "Jürgen Cito"], "title": "Static Factorisation of Probabilistic Programs With User-Labelled Sample Statements and While Loops", "comment": null, "summary": "It is commonly known that any Bayesian network can be implemented as a\nprobabilistic program, but the reverse direction is not so clear. In this work,\nwe address the open question to what extent a probabilistic program with\nuser-labelled sample statements and while loops - features found in languages\nlike Gen, Turing, and Pyro - can be represented graphically. To this end, we\nextend existing operational semantics to support these language features. By\ntranslating a program to its control-flow graph, we define a sound static\nanalysis that approximates the dependency structure of the random variables in\nthe program. As a result, we obtain a static factorisation of the implicitly\ndefined program density, which is equivalent to the known Bayesian network\nfactorisation for programs without loops and constant labels, but constitutes a\nnovel graphical representation for programs that define an unbounded number of\nrandom variables via loops or dynamic labels. We further develop a sound\nprogram slicing technique to leverage this structure to statically enable three\nwell-known optimisations for the considered program class: we reduce the\nvariance of gradient estimates in variational inference and we speed up both\nsingle-site Metropolis Hastings and sequential Monte Carlo. These optimisations\nare proven correct and empirically shown to match or outperform existing\ntechniques."}
